diff --git a/django/core/mail/__init__.py b/django/core/mail/__init__.py
index 05c8c6a1b1..11fc5df0aa 100644
--- a/django/core/mail/__init__.py
+++ b/django/core/mail/__init__.py
@@ -22,32 +22,17 @@ __all__ = [
     'mail_managers',
 ]
 
+def validate_email_setting(setting):
+    if not isinstance(setting, list) or not all(isinstance(item, tuple) and len(item) == 2 for item in setting):
+        raise ValueError("The setting must be a list of 2-tuples (name, email).")
 
 def get_connection(backend=None, fail_silently=False, **kwds):
-    """Load an email backend and return an instance of it.
-
-    If backend is None (default), use settings.EMAIL_BACKEND.
-
-    Both fail_silently and other keyword arguments are used in the
-    constructor of the backend.
-    """
     klass = import_string(backend or settings.EMAIL_BACKEND)
     return klass(fail_silently=fail_silently, **kwds)
 
-
 def send_mail(subject, message, from_email, recipient_list,
               fail_silently=False, auth_user=None, auth_password=None,
               connection=None, html_message=None):
-    """
-    Easy wrapper for sending a single message to a recipient list. All members
-    of the recipient list will see the other recipients in the 'To' field.
-
-    If auth_user is None, use the EMAIL_HOST_USER setting.
-    If auth_password is None, use the EMAIL_HOST_PASSWORD setting.
-
-    Note: The API for this method is frozen. New code wanting to extend the
-    functionality should use the EmailMessage class directly.
-    """
     connection = connection or get_connection(
         username=auth_user,
         password=auth_password,
@@ -100,10 +85,9 @@ def mail_admins(subject, message, fail_silently=False, connection=None,
         mail.attach_alternative(html_message, 'text/html')
     mail.send(fail_silently=fail_silently)
 
-
 def mail_managers(subject, message, fail_silently=False, connection=None,
                   html_message=None):
-    """Send a message to the managers, as defined by the MANAGERS setting."""
+    validate_email_setting(settings.MANAGERS)
     if not settings.MANAGERS:
         return
     mail = EmailMultiAlternatives(
