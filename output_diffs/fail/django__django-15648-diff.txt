diff --git a/django/contrib/syndication/views.py b/django/contrib/syndication/views.py
index a9d1bff5cf..0ac5468027 100644
--- a/django/contrib/syndication/views.py
+++ b/django/contrib/syndication/views.py
@@ -8,7 +8,7 @@ from django.utils.html import escape
 from django.utils.http import http_date
 from django.utils.timezone import get_default_timezone, is_naive, make_aware
 from django.utils.translation import get_language
-
+import inspect
 
 def add_domain(domain, url, secure=False):
     protocol = "https" if secure else "http"
@@ -79,14 +79,14 @@ class Feed:
         except AttributeError:
             return default
         if callable(attr):
-            # Check co_argcount rather than try/excepting the function and
-            # catching the TypeError, because something inside the function
-            # may raise the TypeError. This technique is more accurate.
-            try:
-                code = attr.__code__
-            except AttributeError:
-                code = attr.__call__.__code__
-            if code.co_argcount == 2:  # one argument is 'self'
+            # Instead of checking co_argcount, we'll use inspect.signature
+            # which can handle functions with *args and **kwargs properly.
+            sig = inspect.signature(attr)
+            params = sig.parameters
+            # We check if 'obj' can be a valid argument for the callable
+            if 'obj' in params or any(
+                p.kind in (p.VAR_POSITIONAL, p.VAR_KEYWORD) for p in params.values()
+            ):
                 return attr(obj)
             else:
                 return attr()
@@ -164,7 +164,8 @@ class Feed:
             except TemplateDoesNotExist:
                 pass
 
-        for item in self._get_dynamic_attr("items", obj):
+        items = self._get_dynamic_attr("items", obj) or []
+        for item in items:
             context = self.get_context_data(
                 item=item, site=current_site, obj=obj, request=request
             )
